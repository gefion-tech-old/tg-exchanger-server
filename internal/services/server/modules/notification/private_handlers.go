package notification

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"math"
	"net/http"
	"strconv"
	"time"

	"github.com/gefion-tech/tg-exchanger-server/internal/app/errors"
	"github.com/gefion-tech/tg-exchanger-server/internal/app/static"
	"github.com/gefion-tech/tg-exchanger-server/internal/models"
	"github.com/gefion-tech/tg-exchanger-server/internal/services/db/nsqstore"
	"github.com/gefion-tech/tg-exchanger-server/internal/tools"
	"github.com/gin-gonic/gin"
	"golang.org/x/sync/errgroup"
)

/*
	@Method POST
	@Path admin/notification
	@Type PUBLIC
	@Documentation

	–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ `notifications`

	# TESTED
*/
func (m *ModNotification) CreateNotificationHandler(c *gin.Context) {
	req := &models.Notification{}
	if err := c.ShouldBindJSON(req); err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, errors.ErrInvalidBody)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	if err := req.NotificationTypeValidation(); err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, err)
		return
	}

	// –ü–æ–ª—É—á–∞—é –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ë–î
	uArr, err := m.store.User().GetAllManagers()
	if err != nil {
		fmt.Println(err)
	}

	switch req.Type {
	case static.NTF__T__VERIFICATION:
		// –ó–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
		for i := 0; i < len(uArr); i++ {
			payload, err := json.Marshal(newVefificationNotify(uArr, i, req))
			if err != nil {
				fmt.Println(err)
			}

			if err := m.nsq.Publish(nsqstore.TOPIC__MESSAGES, payload); err != nil {
				fmt.Println(err)
			}
		}

	case static.NTF__T__EXCHANGE_ERROR:
		// –ó–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
		for i := 0; i < len(uArr); i++ {
			payload, err := json.Marshal(newActionCancelNotify(uArr, i, req))
			if err != nil {
				fmt.Println(err)
			}

			if err := m.nsq.Publish(nsqstore.TOPIC__MESSAGES, payload); err != nil {
				fmt.Println(err)
			}
		}

	case static.NTF__T__REQ_SUPPORT:
		// –ó–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
		for i := 0; i < len(uArr); i++ {
			payload, err := json.Marshal(newSupportReqNotify(uArr, i, req))
			if err != nil {
				fmt.Println(err)
			}

			if err := m.nsq.Publish(nsqstore.TOPIC__MESSAGES, payload); err != nil {
				fmt.Println(err)
			}
		}
	}

	n, err := m.store.Manager().Notification().Create(req)
	switch err {
	case nil:
		c.JSON(http.StatusCreated, n)
		return
	default:
		tools.ServErr(c, http.StatusUnprocessableEntity, err)
		return
	}

}

/*
	@Method GET
	@Path admin/notifications?page=1&limit=15
	@Type PRIVATE
	@Documentation

	–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `notifications`

	# TESTED

*/
func (m *ModNotification) GetNotificationsSelectionHandler(c *gin.Context) {
	errs, _ := errgroup.WithContext(c)

	cArrN := make(chan []*models.Notification)
	cCount := make(chan *int)

	page, err := strconv.Atoi(c.DefaultQuery("page", "1"))
	if err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, err)
	}

	limit, err := strconv.Atoi(c.DefaultQuery("limit", "15"))
	if err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, err)
		return
	}

	// –î–æ—Å—Ç–∞—é –∏–∑ –ë–î –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏
	errs.Go(func() error {
		defer close(cArrN)
		arrN, err := m.store.Manager().Notification().Selection(page, limit)
		if err != nil {
			return err
		}

		cArrN <- arrN
		return nil
	})

	// –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª-–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
	errs.Go(func() error {
		defer close(cCount)
		c, err := m.store.Manager().Notification().Count()
		if err != nil {
			return err
		}

		cCount <- &c
		return nil
	})

	arrN := <-cArrN
	count := <-cCount

	if arrN == nil || count == nil {
		tools.ServErr(c, http.StatusInternalServerError, errs.Wait())
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"limit":        limit,
		"current_page": page,
		"last_page":    math.Ceil(float64(*count) / float64(limit)),
		"data":         arrN,
	})
}

/*
	@Method PUT
	@Path admin/notification
	@Type PRIVATE
	@Documentation

	–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ status –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ `notifications`

	# TESTED
*/
func (m *ModNotification) UpdateNotificationStatusHandler(c *gin.Context) {
	req := &models.Notification{}
	if err := c.ShouldBindJSON(req); err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, errors.ErrInvalidBody)
		return
	}

	if req.NotificationStatusValidation() != nil || req.NotificationTypeValidation() != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, errors.ErrInvalidBody)
		return
	}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, err)
		return
	}

	req.ID = id

	n, err := m.store.Manager().Notification().UpdateStatus(req)
	switch err {
	case nil:
		c.JSON(http.StatusOK, n)
		return
	case sql.ErrNoRows:
		tools.ServErr(c, http.StatusNotFound, errors.ErrRecordNotFound)
		return
	default:
		tools.ServErr(c, http.StatusNotFound, err)
		return
	}
}

/*
	@Method DELETE
	@Path admin/notification
	@Type PRIVATE
	@Documentation

	–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ `notifications`

	# TESTED
*/
func (m *ModNotification) DeleteNotificationHandler(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		tools.ServErr(c, http.StatusUnprocessableEntity, err)
		return
	}

	n, err := m.store.Manager().Notification().Delete(&models.Notification{ID: id})
	switch err {
	case nil:
		c.JSON(http.StatusOK, n)
		return
	case sql.ErrNoRows:
		tools.ServErr(c, http.StatusNotFound, errors.ErrRecordNotFound)
		return
	default:
		tools.ServErr(c, http.StatusNotFound, err)
		return
	}
}

func newSupportReqNotify(uArr []*models.User, i int, n *models.Notification) map[string]interface{} {
	return map[string]interface{}{
		"to": map[string]interface{}{
			"chat_id":  uArr[i].ChatID,
			"username": uArr[i].Username,
		},
		"message": map[string]interface{}{
			"type": "confirmation_req",
			"text": fmt.Sprintf("üîµ –ó–∞–ø—Ä–æ—Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üîµ\n\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: @%s", n.User.Username),
		},
		"created_at": time.Now().UTC().Format("2006-01-02T15:04:05.00000000"),
	}
}

func newVefificationNotify(uArr []*models.User, i int, n *models.Notification) map[string]interface{} {
	return map[string]interface{}{
		"to": map[string]interface{}{
			"chat_id":  uArr[i].ChatID,
			"username": uArr[i].Username,
		},
		"message": map[string]interface{}{
			"type": "confirmation_req",
			"text": fmt.Sprintf("üü¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ üü¢\n\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: @%s", n.User.Username),
		},
		"created_at": time.Now().UTC().Format("2006-01-02T15:04:05.00000000"),
	}
}

func newActionCancelNotify(uArr []*models.User, i int, n *models.Notification) map[string]interface{} {
	return map[string]interface{}{
		"to": map[string]interface{}{
			"chat_id":  uArr[i].ChatID,
			"username": uArr[i].Username,
		},
		"message": map[string]interface{}{
			"type": "skip_operation",
			"text": fmt.Sprintf("üî¥ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ üî¥\n\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: @%s", n.User.Username),
		},
		"created_at": time.Now().UTC().Format("2006-01-02T15:04:05.00000000"),
	}
}
